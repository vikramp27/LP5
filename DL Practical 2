import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import fashion_mnist

# Load Fashion MNIST dataset
(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()

# Preprocess the data
x_train = x_train / 255.0
x_test = x_test / 255.0
x_train = np.expand_dims(x_train, axis=-1)
x_test = np.expand_dims(x_test, axis=-1)

# Define the model architecture
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=10, batch_size=32)

# Evaluate the model
test_loss, test_acc = model.evaluate(x_test, y_test)
print('Test loss:', test_loss)
print('Test accuracy:', test_acc)

# Save the model
model.save('fashion_model.h5')

# Load the saved model
from tensorflow.keras.models import load_model
model = load_model('fashion_model.h5')

# Select random samples from the test set
indices = np.random.randint(0, len(x_test), size=5)
sample_images = x_test[indices]
sample_labels = y_test[indices]

# Make predictions on the random samples
predictions = model.predict(sample_images)

# Define class names
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

# Get predicted labels and corresponding class names
predicted_labels = np.argmax(predictions, axis=1)
predicted_class_names = [class_names[label] for label in predicted_labels]

# Display images with true and predicted labels
for i in range(len(sample_images)):
    plt.imshow(sample_images[i].reshape(28, 28), cmap='gray')
    plt.title(f'True Label: {class_names[sample_labels[i]]}\nPredicted Label: {predicted_class_names[i]}')
    plt.axis('off')
    plt.show()
