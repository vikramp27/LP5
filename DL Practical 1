import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from sklearn import metrics
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def load_boston_data():
    boston = tf.keras.datasets.boston_housing
    return boston.load_data()

def preprocess_data(x_train, x_test, y_train, y_test):
    scaler = StandardScaler()
    x_train_scaled = scaler.fit_transform(x_train)
    x_test_scaled = scaler.transform(x_test)
    y_train_scaled = scaler.fit_transform(y_train.reshape(-1, 1))
    y_test_scaled = scaler.transform(y_test.reshape(-1, 1))
    return x_train_scaled, x_test_scaled, y_train_scaled, y_test_scaled

def build_model(input_shape):
    model = tf.keras.models.Sequential([
        tf.keras.layers.Input(shape=input_shape, name='input-layer'),
        tf.keras.layers.Dense(100, name='hidden-layer-2'),
        tf.keras.layers.BatchNormalization(name='hidden-layer-3'),
        tf.keras.layers.Dense(50, name='hidden-layer-4'),
        tf.keras.layers.Dense(1, name='output-layer')
    ])
    return model

def compile_model(model):
    model.compile(
        optimizer='adam',
        loss='mse',
        metrics=['mae']
    )

def train_model(model, x_train, y_train, x_test, y_test, epochs=20, batch_size=32):
    history = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test))
    return history

def make_predictions(model, x_test):
    return model.predict(x_test)

def plot_regression_line(y_test, y_pred):
    sns.regplot(x=y_test, y=y_pred)
    plt.title("Regression Line for Predicted values")
    plt.show()

def regression_metrics_display(y_test, y_pred):
    print(f"MAE is {metrics.mean_absolute_error(y_test, y_pred)}")
    print(f"MSE is {metrics.mean_squared_error(y_test, y_pred)}")
    print(f"R2 score is {metrics.r2_score(y_test, y_pred)}")

boston_data = load_boston_data()
(x_train, y_train), (x_test, y_test) = boston_data
x_train_scaled, x_test_scaled, y_train_scaled, y_test_scaled = preprocess_data(x_train, x_test, y_train, y_test)
input_shape = x_train_scaled.shape[1:]
model = build_model(input_shape)
compile_model(model)
history = train_model(model, x_train_scaled, y_train_scaled, x_test_scaled, y_test_scaled)
y_pred = make_predictions(model, x_test_scaled)
plot_regression_line(y_test_scaled, y_pred)
regression_metrics_display(y_test_scaled, y_pred)
